// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(cuid())
  email            String   @unique
  phone            String   @unique
  name             String
  age              Int?
  qualification    String?
  certifications   String[]
  profilePhoto     String?
  isVerified       Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  communities      CommunityMember[]
  createdCommunities Community[] @relation("CommunityAdmin")
  createdRequests  HelpRequest[] @relation("RequestCreator")
  helpingRequests  HelpRequest[] @relation("RequestHelper")
  requestResponses RequestResponse[]
  sentMessages     Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
  transactions     Transaction[] @relation("TransactionPayer")
  receivedTransactions Transaction[] @relation("TransactionPayee")
  reputations      UserReputation[]
  badgeAssignments BadgeAssignment[]

  @@map("users")
}

model Community {
  id          String   @id @default(cuid())
  name        String
  inviteCode  String   @unique
  adminId     String
  settings    Json?
  rules       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  admin       User              @relation("CommunityAdmin", fields: [adminId], references: [id], onDelete: Cascade)
  members     CommunityMember[]
  helpRequests HelpRequest[]
  reputations UserReputation[]
  leaderboards Leaderboard[]
  badgeAssignments BadgeAssignment[]

  @@map("communities")
}

model CommunityMember {
  id          String   @id @default(cuid())
  communityId String
  userId      String
  role        String   @default("member") // admin, member
  status      String   @default("pending") // pending, approved, rejected
  joinedAt    DateTime @default(now())

  // Relations
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([communityId, userId])
  @@map("community_members")
}

model HelpRequest {
  id            String   @id @default(cuid())
  requesterId   String
  communityId   String
  title         String
  description   String
  category      String
  status        String   @default("pending") // pending, accepted, completed, cancelled
  helperId      String?
  location      String?
  timing        String?
  privacyLevel  String   @default("community") // community, public
  attachments   String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  requester     User              @relation("RequestCreator", fields: [requesterId], references: [id], onDelete: Cascade)
  community     Community         @relation(fields: [communityId], references: [id], onDelete: Cascade)
  helper        User?             @relation("RequestHelper", fields: [helperId], references: [id])
  responses     RequestResponse[]
  messages      Message[]
  transactions  Transaction[]

  @@map("help_requests")
}

model RequestResponse {
  id          String   @id @default(cuid())
  requestId   String
  helperId    String
  message     String
  status      String   @default("pending") // pending, accepted, rejected
  createdAt   DateTime @default(now())

  // Relations
  request     HelpRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  helper      User        @relation(fields: [helperId], references: [id], onDelete: Cascade)

  @@map("request_responses")
}

model Message {
  id            String   @id @default(cuid())
  senderId      String
  receiverId    String
  requestId     String
  content       String
  messageType   String   @default("text") // text, image, file
  attachments   String[]
  createdAt     DateTime @default(now())

  // Relations
  sender        User        @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver      User        @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  request       HelpRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Transaction {
  id                String   @id @default(cuid())
  requestId         String
  payerId           String
  payeeId           String
  amount            Float
  status            String   @default("pending") // pending, completed, failed, refunded
  paymentGatewayId  String?
  createdAt         DateTime @default(now())
  completedAt       DateTime?

  // Relations
  request           HelpRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  payer             User        @relation("TransactionPayer", fields: [payerId], references: [id], onDelete: Cascade)
  payee             User        @relation("TransactionPayee", fields: [payeeId], references: [id], onDelete: Cascade)
  escrowHolds       EscrowHold[]

  @@map("transactions")
}

model EscrowHold {
  id                String   @id @default(cuid())
  transactionId     String
  releaseTime       DateTime
  verificationProof String?
  status            String   @default("held") // held, released, disputed

  // Relations
  transaction       Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@map("escrow_holds")
}

model UserReputation {
  id            String   @id @default(cuid())
  userId        String
  communityId   String
  totalPoints   Int      @default(0)
  helperScore   Int      @default(0)
  requesterScore Int     @default(0)
  badges        String[]
  rank          Int?
  updatedAt     DateTime @updatedAt

  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  community     Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@unique([userId, communityId])
  @@map("user_reputations")
}

model BadgeAssignment {
  id          String   @id @default(cuid())
  userId      String
  communityId String
  badgeType   String
  earnedAt    DateTime @default(now())

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@map("badge_assignments")
}

model Leaderboard {
  id          String   @id @default(cuid())
  communityId String
  period      String   // weekly, monthly, all-time
  rankings    Json     // Store leaderboard data
  updatedAt   DateTime @updatedAt

  // Relations
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@unique([communityId, period])
  @@map("leaderboards")
}